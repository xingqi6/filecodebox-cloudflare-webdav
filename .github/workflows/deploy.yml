name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      reason:
        description: Optional note for this run
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Debug event context
        run: |
          echo "Actor: $GITHUB_ACTOR"
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Ref: $GITHUB_REF"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Reason: ${{ inputs.reason }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Wrangler
        run: npm i -g wrangler@4

      - name: Show Wrangler version
        run: wrangler --version

      - name: Validate mandatory secrets
        run: |
          missing=0
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then echo "::error::Missing secret CLOUDFLARE_API_TOKEN"; missing=1; fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then echo "::error::Missing secret CLOUDFLARE_ACCOUNT_ID"; missing=1; fi
          if [ -z "${{ secrets.WEBDAV_PASSWORD }}" ]; then echo "::error::Missing secret WEBDAV_PASSWORD"; missing=1; fi
          if [ $missing -eq 1 ]; then echo "Required secrets are missing. Configure them in Repository Settings → Secrets and variables → Actions."; exit 1; fi

      - name: Auto-provision KV namespace
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          
          # 临时重命名 wrangler.toml
          mv wrangler.toml wrangler.toml.template

          echo "🔧 开始自动配置 Cloudflare KV..."
          echo "Account ID: $CLOUDFLARE_ACCOUNT_ID"

          # 创建 KV 命名空间
          echo "🗄️  检查 KV 命名空间..."
          KV_LIST=$(wrangler kv namespace list 2>/dev/null || echo "[]")
          echo "现有 KV namespaces:"
          echo "$KV_LIST"
          
          CF_KV_ID=$(echo "$KV_LIST" | grep -B 1 '"title": "FILECODEBOX_KV"' | grep '"id"' | head -1 | sed 's/.*"id": "\([^"]*\)".*/\1/')
          
          if [ -n "$CF_KV_ID" ]; then
            echo "✅ 找到已存在的 KV namespace: $CF_KV_ID"
          else
            echo "创建 KV namespace: FILECODEBOX_KV"
            wrangler kv namespace create FILECODEBOX_KV 2>&1 || echo "⚠️  可能已存在，继续..."
            
            sleep 2
            KV_LIST=$(wrangler kv namespace list 2>/dev/null || echo "[]")
            CF_KV_ID=$(echo "$KV_LIST" | grep -B 1 '"title": "FILECODEBOX_KV"' | grep '"id"' | head -1 | sed 's/.*"id": "\([^"]*\)".*/\1/')
          fi

          CF_KV_PREVIEW_ID=$(echo "$KV_LIST" | grep -B 1 '"title": "FILECODEBOX_KV_preview"' | grep '"id"' | head -1 | sed 's/.*"id": "\([^"]*\)".*/\1/')
          
          if [ -n "$CF_KV_PREVIEW_ID" ]; then
            echo "✅ 找到已存在的预览 KV namespace: $CF_KV_PREVIEW_ID"
          else
            echo "创建预览 KV namespace: FILECODEBOX_KV_preview"
            wrangler kv namespace create FILECODEBOX_KV --preview 2>&1 || echo "⚠️  可能已存在，继续..."
            
            sleep 2
            KV_LIST=$(wrangler kv namespace list 2>/dev/null || echo "[]")
            CF_KV_PREVIEW_ID=$(echo "$KV_LIST" | grep -B 1 '"title": "FILECODEBOX_KV_preview"' | grep '"id"' | head -1 | sed 's/.*"id": "\([^"]*\)".*/\1/')
          fi

          if [ -z "$CF_KV_ID" ] || [ -z "$CF_KV_PREVIEW_ID" ]; then
            echo "❌ 错误: 无法获取 KV namespace ID"
            echo "KV_ID='$CF_KV_ID'"
            echo "KV_PREVIEW_ID='$CF_KV_PREVIEW_ID'"
            wrangler kv namespace list
            exit 1
          fi

          echo ""
          echo "📋 资源配置完成:"
          echo "  KV ID: $CF_KV_ID"
          echo "  KV Preview ID: $CF_KV_PREVIEW_ID"

          echo "CF_KV_ID=$CF_KV_ID" >> $GITHUB_ENV
          echo "CF_KV_PREVIEW_ID=$CF_KV_PREVIEW_ID" >> $GITHUB_ENV
          
          mv wrangler.toml.template wrangler.toml

      - name: 生成配置文件并替换占位符
        env:
          CF_KV_ID: ${{ env.CF_KV_ID }}
          CF_KV_PREVIEW_ID: ${{ env.CF_KV_PREVIEW_ID }}
          WEBDAV_URL: ${{ vars.WEBDAV_URL || secrets.WEBDAV_URL }}
          WEBDAV_USERNAME: ${{ vars.WEBDAV_USERNAME || secrets.WEBDAV_USERNAME }}
        run: |
          set -e
          
          echo "🔄 正在生成部署配置..."
          cp wrangler.toml wrangler.gen.toml
          
          # 验证必需的环境变量
          if [ -z "$CF_KV_ID" ] || [ -z "$CF_KV_PREVIEW_ID" ]; then
            echo "❌ 错误: KV ID 未设置"
            exit 1
          fi
          
          if [ -z "$WEBDAV_URL" ] || [ -z "$WEBDAV_USERNAME" ]; then
            echo "❌ 错误: WebDAV 配置未设置"
            echo "请在 GitHub 仓库设置中添加 Variables:"
            echo "  - WEBDAV_URL"
            echo "  - WEBDAV_USERNAME"
            exit 1
          fi

          # 替换 KV 占位符
          sed -i "s/REPLACE_WITH_YOUR_KV_ID/$CF_KV_ID/g" wrangler.gen.toml
          sed -i "s/REPLACE_WITH_YOUR_KV_PREVIEW_ID/$CF_KV_PREVIEW_ID/g" wrangler.gen.toml
          
          # 替换 WebDAV 占位符
          sed -i "s|REPLACE_WITH_WEBDAV_URL|$WEBDAV_URL|g" wrangler.gen.toml
          sed -i "s/REPLACE_WITH_WEBDAV_USERNAME/$WEBDAV_USERNAME/g" wrangler.gen.toml

          echo ""
          echo "📄 生成的配置文件 (KV 部分):"
          grep -A 3 "kv_namespaces" wrangler.gen.toml || true
          echo ""
          echo "📄 生成的配置文件 (WebDAV 部分):"
          grep -A 2 "WebDAV" wrangler.gen.toml || true
          echo ""
          echo "✅ 配置文件生成完成"

      - name: 设置 Cloudflare Secrets
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
          PERMANENT_PASSWORD: ${{ secrets.PERMANENT_PASSWORD }}
        run: |
          # 设置 WebDAV 密码
          if [ -n "$WEBDAV_PASSWORD" ]; then
            echo "🔐 设置 WebDAV 密码"
            echo -n "$WEBDAV_PASSWORD" | wrangler secret put WEBDAV_PASSWORD --config wrangler.gen.toml
          else
            echo "❌ 错误: WEBDAV_PASSWORD 未设置"
            exit 1
          fi
          
          # 设置永久密码
          if [ -n "$PERMANENT_PASSWORD" ]; then
            echo "🔐 使用自定义永久密码"
            echo -n "$PERMANENT_PASSWORD" | wrangler secret put PERMANENT_PASSWORD --config wrangler.gen.toml
          else
            echo "🔐 使用默认永久密码: 123456"
            echo -n "123456" | wrangler secret put PERMANENT_PASSWORD --config wrangler.gen.toml
          fi
          
          echo "✅ Secrets 已设置"

      - name: 部署到 Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "🚀 开始部署到 Cloudflare Workers..."
          
          if [ -f wrangler.gen.toml ]; then
            wrangler deploy --config wrangler.gen.toml
          else
            echo "❌ 错误: wrangler.gen.toml 不存在"
            exit 1
          fi
          
          echo ""
          echo "✅ 部署成功！"
          echo "📦 您的文件快递柜已部署到 Cloudflare Workers（使用 WebDAV 存储）"
          echo "🔑 永久保存功能密码: 123456 (可通过 PERMANENT_PASSWORD secret 自定义)"
